[{"/Users/leeraulin/Projects/snapnurse/my-booker/src/index.js":"1","/Users/leeraulin/Projects/snapnurse/my-booker/src/App.js":"2","/Users/leeraulin/Projects/snapnurse/my-booker/src/reportWebVitals.js":"3","/Users/leeraulin/Projects/snapnurse/my-booker/src/ViewTimecard.js":"4","/Users/leeraulin/Projects/snapnurse/my-booker/src/api.js":"5","/Users/leeraulin/Projects/snapnurse/my-booker/src/Timecards.js":"6","/Users/leeraulin/Projects/snapnurse/my-booker/src/Login.jsx":"7","/Users/leeraulin/Projects/snapnurse/my-booker/src/ImageViewer.js":"8","/Users/leeraulin/Projects/snapnurse/my-booker/src/Inspector.js":"9","/Users/leeraulin/Projects/snapnurse/my-booker/src/use-auth.js":"10","/Users/leeraulin/Projects/snapnurse/my-booker/src/PrivateRoute.jsx":"11"},{"size":500,"mtime":1610063755680,"results":"12","hashOfConfig":"13"},{"size":1677,"mtime":1611409842591,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1610063755681,"results":"15","hashOfConfig":"13"},{"size":1470,"mtime":1610573118363,"results":"16","hashOfConfig":"13"},{"size":2987,"mtime":1611413057844,"results":"17","hashOfConfig":"13"},{"size":3500,"mtime":1611410947322,"results":"18","hashOfConfig":"13"},{"size":1686,"mtime":1610582609156,"results":"19","hashOfConfig":"13"},{"size":1490,"mtime":1610659613848,"results":"20","hashOfConfig":"13"},{"size":7915,"mtime":1610582393459,"results":"21","hashOfConfig":"13"},{"size":1380,"mtime":1610991355356,"results":"22","hashOfConfig":"13"},{"size":617,"mtime":1610202795263,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1sipa11",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/leeraulin/Projects/snapnurse/my-booker/src/index.js",[],["48","49"],"/Users/leeraulin/Projects/snapnurse/my-booker/src/App.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/reportWebVitals.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/ViewTimecard.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/api.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/Timecards.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/Login.jsx",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/ImageViewer.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/Inspector.js",["50","51"],"import React, { useState, useEffect } from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\n\nconst getWorkerName = (tc) =>\n  tc.user ? tc.user.firstName + ' ' + tc.user.lastName : '';\n\nconst getPayRates = ({ timecardPayRate }) => {\n  if (!timecardPayRate) return '';\n  const {\n    description,\n    payRate,\n    overtimePayRate,\n    doubletimePayRate,\n  } = timecardPayRate;\n  return `${description}\\n${payRate} / ${doubletimePayRate} / ${overtimePayRate}`;\n};\n\nconst float = (n) => Number.parseFloat(n);\n\nconst getRegularHours = (tc) =>\n  (float(tc.amount) - float(tc.overtimeAmount) - float(tc.doubletimeAmount)) /\n  float(tc.timecardPayRate.payRate);\n\nconst getTotalHours = (tc) =>\n  getRegularHours(tc) + float(tc.overtimeHours) + float(tc.doubletimeHours);\n\nconst getTotal = (tc) =>\n  Number.parseFloat(tc.stipendPaymentAmount) + Number.parseFloat(tc.total);\n\nconst formatDate = (dateString = '') => {\n  const d = new Date(dateString);\n  const ampm = d.getHours() >= 12 ? 'pm' : 'am';\n  return (\n    d.toDateString() +\n    ' @ ' +\n    (d.getHours() % 12) +\n    ':' +\n    d.getMinutes().toString().padStart(2, '0') +\n    ' ' +\n    ampm +\n    ' (' +\n    d.getHours().toString().padStart(2, '0') +\n    d.getMinutes().toString().padStart(2, '0') +\n    ')'\n  );\n};\n\nconst Inspector = ({ tc }) => {\n  return (\n    <Form>\n      <Form.Group as={Row} controlId=\"formType\">\n        <Form.Label column sm=\"2\">\n          Type\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={tc.type} />\n        </Col>\n      </Form.Group>\n\n      {/* <Form.Group as={Row} controlId=\"formShiftDescription\">\n        <Form.Label column sm=\"2\">\n          Shift Description\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue=\"...\" />\n        </Col>\n      </Form.Group> */}\n\n      <Form.Group as={Row} controlId=\"formFacility\">\n        <Form.Label column sm=\"2\">\n          Facility\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.facility && tc.facility.name}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formUnitNumber\">\n        <Form.Label column sm=\"2\">\n          Unit Number\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.unitNumber || '-'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formFacilityManager\">\n        <Form.Label column sm=\"2\">\n          Facility Manager\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.facilityManager || '-'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formPayRateDescription\">\n        <Form.Label column sm=\"2\">\n          Pay Rate Description\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={\n              (tc.timecardPayRate && tc.timecardPayRate.description) || '-'\n            }\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formWorker\">\n        <Form.Label column sm=\"2\">\n          Worker\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getWorkerName(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formStartShift\">\n        <Form.Label column sm=\"2\">\n          Start Shift\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={formatDate(tc.startTime)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formEndShift\">\n        <Form.Label column sm=\"2\">\n          End Shift\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={formatDate(tc.endTime)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formLunch\">\n        <Form.Label column sm=\"2\">\n          Lunch\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.lunchInMinutes + ' min'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRegularHours\">\n        <Form.Label column sm=\"2\">\n          Regular Hours\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getRegularHours(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formOvertimeHours\">\n        <Form.Label column sm=\"2\">\n          Overtime Hours\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={float(tc.overtimeHours)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formTotalHoursWorked\">\n        <Form.Label column sm=\"2\">\n          Total Hours Worked\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getTotalHours(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRate\">\n        <Form.Label column sm=\"2\">\n          Rate\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getPayRates(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRegularPay\">\n        <Form.Label column sm=\"2\">\n          Regular Pay\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={tc.amount} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formOvertimePay\">\n        <Form.Label column sm=\"2\">\n          Overtime Pay\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={tc.overtimeAmount} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formNonTaxableAdjustment\">\n        <Form.Label column sm=\"2\">\n          Non Taxable Adjustment\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control defaultValue=\"Set non taxable adjustment for a worker\" />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formAdjustment\">\n        <Form.Label column sm=\"2\">\n          Adjustment\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue=\"Set adjustment if needed\"\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formMemo\">\n        <Form.Label column sm=\"2\">\n          Memo\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue=\"Additional notes can be here\"\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formStipend\">\n        <Form.Label column sm=\"2\">\n          Stipend(Pro-Rated)\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={'$' + tc.stipendPaymentAmount}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formTotal\">\n        <Form.Label column sm=\"2\">\n          Total\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={'$' + getTotal(tc)} />\n        </Col>\n      </Form.Group>\n      <Button variant=\"success\">Approve</Button>\n      <Button variant=\"primary\">Edit</Button>\n      <Button variant=\"secondary\">Cancel</Button>\n      <Button variant=\"danger\">Remove</Button>\n    </Form>\n  );\n};\n\nexport default Inspector;\n","/Users/leeraulin/Projects/snapnurse/my-booker/src/use-auth.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/PrivateRoute.jsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]