[{"/Users/lee/Projects/Snapnurse/my-booker/src/index.js":"1","/Users/lee/Projects/Snapnurse/my-booker/src/reportWebVitals.js":"2","/Users/lee/Projects/Snapnurse/my-booker/src/App.js":"3","/Users/lee/Projects/Snapnurse/my-booker/src/Timecards.js":"4","/Users/lee/Projects/Snapnurse/my-booker/src/ViewTimecard.js":"5","/Users/lee/Projects/Snapnurse/my-booker/src/use-auth.js":"6","/Users/lee/Projects/Snapnurse/my-booker/src/AuthButton.js":"7","/Users/lee/Projects/Snapnurse/my-booker/src/Login.jsx":"8","/Users/lee/Projects/Snapnurse/my-booker/src/PrivateRoute.jsx":"9","/Users/lee/Projects/Snapnurse/my-booker/src/HolidayPay.js":"10","/Users/lee/Projects/Snapnurse/my-booker/src/api.js":"11","/Users/lee/Projects/Snapnurse/my-booker/src/Inspector.js":"12","/Users/lee/Projects/Snapnurse/my-booker/src/ImageViewer.js":"13","/Users/lee/Projects/Snapnurse/my-booker/src/lib.js":"14","/Users/lee/Projects/Snapnurse/my-booker/src/CopyButton.jsx":"15","/Users/lee/Projects/Snapnurse/my-booker/src/BookerUrl.jsx":"16"},{"size":500,"mtime":1615038717561,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1615038717562,"results":"19","hashOfConfig":"18"},{"size":2113,"mtime":1616434051021,"results":"20","hashOfConfig":"18"},{"size":6593,"mtime":1615038717560,"results":"21","hashOfConfig":"18"},{"size":1872,"mtime":1615038717560,"results":"22","hashOfConfig":"18"},{"size":1380,"mtime":1615038717562,"results":"23","hashOfConfig":"18"},{"size":594,"mtime":1615038717558,"results":"24","hashOfConfig":"18"},{"size":1686,"mtime":1615038717560,"results":"25","hashOfConfig":"18"},{"size":617,"mtime":1615038717560,"results":"26","hashOfConfig":"18"},{"size":6521,"mtime":1615038717559,"results":"27","hashOfConfig":"18"},{"size":4653,"mtime":1615038717560,"results":"28","hashOfConfig":"18"},{"size":8114,"mtime":1615038717559,"results":"29","hashOfConfig":"18"},{"size":1490,"mtime":1615038717559,"results":"30","hashOfConfig":"18"},{"size":871,"mtime":1615038717561,"results":"31","hashOfConfig":"18"},{"size":641,"mtime":1615038717559,"results":"32","hashOfConfig":"18"},{"size":902,"mtime":1615038717559,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1enx4tt",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lee/Projects/Snapnurse/my-booker/src/index.js",[],["68","69"],"/Users/lee/Projects/Snapnurse/my-booker/src/reportWebVitals.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/App.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/Timecards.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/ViewTimecard.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/use-auth.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/AuthButton.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/Login.jsx",[],"/Users/lee/Projects/Snapnurse/my-booker/src/PrivateRoute.jsx",[],"/Users/lee/Projects/Snapnurse/my-booker/src/HolidayPay.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/api.js",["70"],"const apiBaseUrl = 'https://app.snapnurse.com/api/v1';\n\nconst authHeader = (token) => ({\n  Authorization: 'Bearer ' + token,\n});\n\nexport const fetchOneTimecard = async (id, token) => {\n  const timecardUrl = apiBaseUrl + '/admin/timecards/' + id;\n  try {\n    console.log('Fetching one timecard from api...');\n    const result = await fetch(timecardUrl, { headers: authHeader(token) });\n    const resbody = await result.json();\n    console.log('Api response:');\n    console.log(resbody);\n    return resbody;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchTimecards = async ({\n  authorization,\n  end,\n  page = 0,\n  limit = 100,\n}) => {\n  const endDate = formatDate(end);\n  const startDate = formatDate(dateOffset(-14, end));\n  const skip = page * limit;\n  try {\n    console.log('Fetching from api...');\n    const result = await fetch(\n      `https://app.snapnurse.com/api/v1/admin/timecards?type=HOURLY&status[]=submitted&status[]=confirmed&status[]=preapproved&workDate[$gte]=${startDate}&workDate[$lte]=${endDate}&platformId=1&$limit=${limit}&$skip=${skip}&$sort[createdAt]=-1`,\n\n      {\n        headers: {\n          accept: 'application/json, text/plain, */*',\n          'accept-language': 'en-US,en;q=0.9',\n          authorization,\n          'if-none-match': 'W/\"87e67-gQagPz/QZeu/cqOYYc7FtOQM+Fc\"',\n          'sec-fetch-dest': 'empty',\n          'sec-fetch-mode': 'cors',\n          'sec-fetch-site': 'same-origin',\n          'sec-gpc': '1',\n        },\n        referrer: `https://app.snapnurse.com/admin/timecards?page=1&startDate=01/10/2021&endDate=01/22/2021&dateRangeType=workDate&type=HOURLY`,\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        body: null,\n        method: 'GET',\n        mode: 'cors',\n        // credentials: 'include',\n      },\n    );\n    const resbody = await result.json();\n    console.log('Api response:');\n    console.log(resbody);\n    return resbody;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst dateOffset = (days, baseDate = new Date()) =>\n  new Date(new Date().setDate(baseDate.getDate() + days));\n\n// YYYY-MM-DD\nconst formatDate = (date) => date.toISOString().slice(0, 10);\n\nexport const fetchAllTimecards = async ({\n  authorization,\n  endDate = formatDate(new Date()),\n  startDate = formatDate(dateOffset(-14)),\n  limit = 100,\n}) => {\n  let timecards = [];\n  let page = 0;\n  const maxRequests = 10;\n  let count = 0;\n  do {\n    count++;\n    const res = await fetchTimecards({\n      authorization,\n      startDate,\n      endDate,\n      page,\n      limit,\n    });\n    if (res.message && res.message.includes('Token expired')) {\n      console.log('Token expired');\n      return { success: false, tokenExpired: true };\n    }\n\n    if (res.data && res.data.length) {\n      timecards = timecards.concat(res.data);\n      page += limit;\n    } else {\n      break;\n    }\n  } while (count <= maxRequests);\n  const success = !!timecards.length;\n  return { success, timecards };\n};\n\nconst postData = async (url = '', data = {}) => {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    // mode: 'cors', // no-cors, *cors, same-origin\n    // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json',\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    // redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'strict-origin-when-cross-origin',\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n};\n\nexport const login = async (login = '', password = '') => {\n  try {\n    console.log('Logging in...');\n    const res = await fetch('https://app.snapnurse.com/api/v1/authentication', {\n      headers: {\n        accept: 'application/json, text/plain, */*',\n        'accept-language': 'en-US,en;q=0.9',\n        'content-type': 'application/json;charset=UTF-8',\n        'sec-fetch-dest': 'empty',\n        'sec-fetch-mode': 'cors',\n        'sec-fetch-site': 'same-origin',\n        'sec-gpc': '1',\n      },\n      referrer: 'https://app.snapnurse.com/login',\n      referrerPolicy: 'strict-origin-when-cross-origin',\n      body: JSON.stringify({ strategy: 'local', login, password }),\n      method: 'POST',\n      mode: 'cors',\n      // credentials: 'include',\n    });\n\n    console.log('Api response:');\n    const resbody = await res.json();\n    console.log(resbody);\n    return resbody;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","/Users/lee/Projects/Snapnurse/my-booker/src/Inspector.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/ImageViewer.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/lib.js",[],"/Users/lee/Projects/Snapnurse/my-booker/src/CopyButton.jsx",[],"/Users/lee/Projects/Snapnurse/my-booker/src/BookerUrl.jsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":104,"column":7,"nodeType":"77","messageId":"78","endLine":104,"endColumn":15},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'postData' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]