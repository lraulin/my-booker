[{"/Users/leeraulin/Projects/snapnurse/my-booker/src/index.js":"1","/Users/leeraulin/Projects/snapnurse/my-booker/src/App.js":"2","/Users/leeraulin/Projects/snapnurse/my-booker/src/reportWebVitals.js":"3","/Users/leeraulin/Projects/snapnurse/my-booker/src/ViewTimecard.js":"4","/Users/leeraulin/Projects/snapnurse/my-booker/src/api.js":"5","/Users/leeraulin/Projects/snapnurse/my-booker/src/Timecards.js":"6","/Users/leeraulin/Projects/snapnurse/my-booker/src/Login.jsx":"7","/Users/leeraulin/Projects/snapnurse/my-booker/src/ImageViewer.js":"8","/Users/leeraulin/Projects/snapnurse/my-booker/src/Inspector.js":"9","/Users/leeraulin/Projects/snapnurse/my-booker/src/use-auth.js":"10","/Users/leeraulin/Projects/snapnurse/my-booker/src/PrivateRoute.jsx":"11","/Users/leeraulin/Projects/snapnurse/my-booker/src/AuthButton.js":"12","/Users/leeraulin/Projects/snapnurse/my-booker/src/HolidayPay.js":"13","/Users/leeraulin/Projects/snapnurse/my-booker/src/lib.js":"14","/Users/leeraulin/Projects/snapnurse/my-booker/src/BookerUrl.jsx":"15","/Users/leeraulin/Projects/snapnurse/my-booker/src/CopyButton.jsx":"16"},{"size":500,"mtime":1610063755680,"results":"17","hashOfConfig":"18"},{"size":1412,"mtime":1612466641372,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1610063755681,"results":"20","hashOfConfig":"18"},{"size":1872,"mtime":1611589719037,"results":"21","hashOfConfig":"18"},{"size":4079,"mtime":1612199279422,"results":"22","hashOfConfig":"18"},{"size":5740,"mtime":1612466434677,"results":"23","hashOfConfig":"18"},{"size":1686,"mtime":1610582609156,"results":"24","hashOfConfig":"18"},{"size":1490,"mtime":1610659613848,"results":"25","hashOfConfig":"18"},{"size":8122,"mtime":1611589404610,"results":"26","hashOfConfig":"18"},{"size":1380,"mtime":1610991355356,"results":"27","hashOfConfig":"18"},{"size":617,"mtime":1610202795263,"results":"28","hashOfConfig":"18"},{"size":594,"mtime":1612462837589,"results":"29","hashOfConfig":"18"},{"size":6360,"mtime":1612462837590,"results":"30","hashOfConfig":"18"},{"size":871,"mtime":1612462837590,"results":"31","hashOfConfig":"18"},{"size":902,"mtime":1612462837589,"results":"32","hashOfConfig":"18"},{"size":641,"mtime":1612462837589,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1sipa11",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leeraulin/Projects/snapnurse/my-booker/src/index.js",[],["69","70"],"/Users/leeraulin/Projects/snapnurse/my-booker/src/App.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/reportWebVitals.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/ViewTimecard.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/api.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/Timecards.js",["71","72"],"import React, { useEffect, useState } from 'react';\nimport { Button, Table } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport { fetchX } from './api';\nimport { useAuth } from './use-auth';\n\nconst getUserName = (tc) =>\n  tc.user && tc.user.firstName + ' ' + tc.user.lastName;\n\nconst float = (str) => Number.parseFloat(str) || 0;\n\nconst getTotalAmount = (tc) =>\n  float(\n    (\n      float(tc.amount) +\n      // float(tc.overtimeAmount) +\n      // float(tc.doubletimeAmount) +\n      float(tc.stipendPaymentAmount)\n    ).toFixed(2),\n  );\n\n// Filter predicate\nconst isSuperAdmin = (timecard) => getTotalAmount(timecard) >= 2000;\n\n// Filter predicate\nconst notZeroed = (timecard) =>\n  !(getTotalAmount(timecard) <= float(timecard.stipendPaymentAmount));\n\nconst details = ({\n  workDate,\n  startTime,\n  endTime,\n  lunchInMinutes,\n  overtimeHours,\n  doubletimeHours,\n  weeklyHours,\n}) => (\n  <>\n    <div>\n      <strong>Start: </strong>\n      {startTime}\n    </div>\n    <div>\n      <strong>Stop: </strong>\n      {endTime}\n    </div>\n    <div>\n      <strong>Lunch: </strong>\n      {lunchInMinutes}\n    </div>\n    <div>\n      <strong>Overtime hours: </strong>\n      {overtimeHours}\n    </div>\n    {Number.parseFloat(doubletimeHours) ? (\n      <div>\n        <strong>Overtime hours: </strong>\n        {doubletimeHours}\n      </div>\n    ) : null}\n\n    <div>\n      <strong>Weekly hours: </strong>\n      {weeklyHours}\n    </div>\n  </>\n);\n\nconst confirmed = ({ confirmUserId, confirmedAt }) =>\n  confirmUserId ? `User #${confirmUserId} on ${confirmedAt}` : '';\n\nconst approved = ({ approvedUserId, approvedAt }) =>\n  approvedUserId ? `User #${approvedUserId} on ${approvedAt}` : '';\n\nconst payRates = ({ timecardPayRate }) => {\n  if (!timecardPayRate) return '';\n  const {\n    description,\n    payRate,\n    overtimePayRate,\n    doubletimePayRate,\n  } = timecardPayRate;\n  return `${description}\\n${payRate} / ${doubletimePayRate} / ${overtimePayRate}`;\n};\n\nconst stipends = ({\n  stipendPaymentAmount,\n  stipendRuleAmount,\n  stipendRuleDays,\n}) => {\n  if (!stipendRuleAmount) return '';\n  return `$${stipendPaymentAmount}\n  $${stipendRuleAmount} / ${stipendRuleDays}`;\n};\n\nconst Timecards = () => {\n  const [timecards, setTimecards] = useState([]);\n  const [page, setPage] = useState(0);\n  const [superOnly, setSuperOnly] = useState(false);\n  const history = useHistory();\n  const auth = useAuth();\n\n  // const handleClick = (tc) => {\n  //   console.log(tc.timecardid);\n  //   console.log(tc);\n  //   history.push('/timecards/view?id=' + tc.id);\n  // };\n\n  const refresh = () => {\n    fetchX({ authorization: auth.token, page }).then((res) => {\n      if (res.data && res.data.length) {\n        localStorage.setItem('timecards', JSON.stringify(res.data));\n        setTimecards(res.data);\n      } else if (res.name === 'Forbidden') {\n        console.log('Token expired. Signing out...');\n        auth.signout();\n        history.push('/');\n      } else {\n        console.log('Problem fetching timecards...');\n        console.log(res);\n      }\n    });\n  };\n\n  const toggleSuperOnly = () => setSuperOnly(!superOnly);\n\n  useEffect(() => {\n    const tcs = JSON.parse(localStorage.getItem('timecards'));\n    if (tcs && tcs.length) {\n      setTimecards(tcs);\n    }\n  }, []);\n\n  const row = (tc) =>\n    tc ? (\n      <tr key={tc.id}>\n        <td>{tc.workDate}</td>\n        <td>{tc.createdAt}</td>\n        <td>{getUserName(tc)}</td>\n        <td>{details(tc)}</td>\n        <td>{payRates(tc)}</td>\n        <td>{tc.agency}</td>\n        <td>{tc.type}</td>\n        <td>{tc.status}</td>\n        <td>{tc.timecardPhotoUrls ? tc.timecardPhotoUrls.length : ''}</td>\n        <td>{stipends(tc)}</td>\n        <td>${getTotalAmount(tc)}</td>\n        <td>\n          <a\n            href={`https://app.snapnurse.com/admin/timecards?type=HOURLY&dateRangeType=workDate&page=1&userId=${tc.userId}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            onClick={() =>\n              setTimecards(timecards.filter((t) => t.userId !== tc.userId))\n            }\n            style={tc.visited ? { color: 'red' } : null}\n          >\n            Open in Booker\n          </a>\n          {/* <Button variant=\"primary\" onClick={() => handleClick(tc)}></Button> */}\n        </td>\n      </tr>\n    ) : null;\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        value={page}\n        min=\"0\"\n        onChange={(e) => setPage(Number.parseInt(e.target.value))}\n      />\n      <Button onClick={refresh}>Fetch Timecards</Button>\n      <Button variant=\"secondary\" onClick={toggleSuperOnly}>\n        Show {superOnly ? 'All Not Zeroed' : 'Only Super Admin'}\n      </Button>\n      <section id=\"timecardStats\">\n        <p>Total Shown: {timecards.length}</p>\n        <p>Admin Approvals: {timecards.filter(isSuperAdmin).length}</p>\n        <p>\n          Zero-Hour:{' '}\n          {\n            timecards.filter(\n              (t) => getTotalAmount(t) <= float(t.stipendPaymentAmount),\n            ).length\n          }\n        </p>\n      </section>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            {[\n              'Work Date',\n              'Created At',\n              'Worker',\n              'Details',\n              'Pay Rates',\n              'Agency',\n              'Type',\n              'Status',\n              'Image',\n              'Stipend',\n              'Total',\n              'Inspect',\n            ].map((header) => (\n              <th>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {superOnly\n            ? timecards.filter(isSuperAdmin).map(row)\n            : timecards.filter(notZeroed).map(row)}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Timecards;\n","/Users/leeraulin/Projects/snapnurse/my-booker/src/Login.jsx",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/ImageViewer.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/Inspector.js",["73"],"import React from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport './Inspector.css';\n\nconst getWorkerName = (tc) =>\n  tc.user ? tc.user.firstName + ' ' + tc.user.lastName : '';\n\nconst getPayRates = ({ timecardPayRate }) => {\n  if (!timecardPayRate) return '';\n  const {\n    description,\n    payRate,\n    overtimePayRate,\n    doubletimePayRate,\n  } = timecardPayRate;\n  return `${description}\\n${payRate} / ${doubletimePayRate} / ${overtimePayRate}`;\n};\n\nconst float = (n) => Number.parseFloat(n);\n\nconst getRegularHours = (tc) =>\n  (float(tc.amount) - float(tc.overtimeAmount) - float(tc.doubletimeAmount)) /\n  float(tc.timecardPayRate.payRate);\n\nconst getTotalHours = (tc) =>\n  getRegularHours(tc) + float(tc.overtimeHours) + float(tc.doubletimeHours);\n\nconst getTotal = (tc) =>\n  Number.parseFloat(tc.stipendPaymentAmount) + Number.parseFloat(tc.total);\n\nconst formatDate = (dateString = '') => {\n  const d = new Date(dateString);\n  const ampm = d.getHours() >= 12 ? 'pm' : 'am';\n  return (\n    d.toDateString() +\n    ' @ ' +\n    (d.getHours() % 12) +\n    ':' +\n    d.getMinutes().toString().padStart(2, '0') +\n    ' ' +\n    ampm +\n    ' (' +\n    d.getHours().toString().padStart(2, '0') +\n    d.getMinutes().toString().padStart(2, '0') +\n    ')'\n  );\n};\n\nconst Inspector = ({ tc }) => {\n  return (\n    <Form>\n      <Form.Group as={Row} controlId=\"formType\">\n        <Form.Label column sm=\"2\">\n          <strong>Type</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={tc.type} />\n        </Col>\n      </Form.Group>\n\n      {/* <Form.Group as={Row} controlId=\"formShiftDescription\">\n        <Form.Label column sm=\"2\">\n          Shift Description\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue=\"...\" />\n        </Col>\n      </Form.Group> */}\n\n      <Form.Group as={Row} controlId=\"formFacility\">\n        <Form.Label column sm=\"2\">\n          <strong>Facility</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.facility && tc.facility.name}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formUnitNumber\">\n        <Form.Label column sm=\"2\">\n          <strong>Unit Number</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.unitNumber || '-'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formFacilityManager\">\n        <Form.Label column sm=\"2\">\n          <strong>Facility Manager</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.facilityManager || '-'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formPayRateDescription\">\n        <Form.Label column sm=\"2\">\n          <strong>Pay Rate Description</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={\n              (tc.timecardPayRate && tc.timecardPayRate.description) || '-'\n            }\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formWorker\">\n        <Form.Label column sm=\"2\">\n          <strong>Worker</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getWorkerName(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formStartShift\">\n        <Form.Label column sm=\"2\">\n          <strong>Start Shift</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={formatDate(tc.startTime)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formEndShift\">\n        <Form.Label column sm=\"2\">\n          <strong>End Shift</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={formatDate(tc.endTime)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formLunch\">\n        <Form.Label column sm=\"2\">\n          <strong>Lunch</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={tc.lunchInMinutes + ' min'}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRegularHours\">\n        <Form.Label column sm=\"2\">\n          <strong>Regular Hours</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getRegularHours(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formOvertimeHours\">\n        <Form.Label column sm=\"2\">\n          <strong>Overtime Hours</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={float(tc.overtimeHours)}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formTotalHoursWorked\">\n        <Form.Label column sm=\"2\">\n          <strong>Total Hours Worked</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getTotalHours(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRate\">\n        <Form.Label column sm=\"2\">\n          <strong>Rate</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={getPayRates(tc)} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formRegularPay\">\n        <Form.Label column sm=\"2\">\n          <strong>Regular Pay</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={'$' + tc.amount} />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formOvertimePay\">\n        <Form.Label column sm=\"2\">\n          <strong>Overtime Pay</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={'$' + tc.overtimeAmount}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formNonTaxableAdjustment\">\n        <Form.Label column sm=\"2\">\n          <strong>Non Taxable Adjustment</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control defaultValue=\"Set non taxable adjustment for a worker\" />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formAdjustment\">\n        <Form.Label column sm=\"2\">\n          <strong>Adjustment</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue=\"Set adjustment if needed\"\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formMemo\">\n        <Form.Label column sm=\"2\">\n          <strong>Memo</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue=\"Additional notes can be here\"\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formStipend\">\n        <Form.Label column sm=\"2\">\n          <strong>Stipend(Pro-Rated)</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            plaintext\n            readOnly\n            defaultValue={'$' + tc.stipendPaymentAmount}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formTotal\">\n        <Form.Label column sm=\"2\">\n          <strong>Total</strong>\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control plaintext readOnly defaultValue={'$' + getTotal(tc)} />\n        </Col>\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default Inspector;\n","/Users/leeraulin/Projects/snapnurse/my-booker/src/use-auth.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/PrivateRoute.jsx",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/AuthButton.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/HolidayPay.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/lib.js",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/BookerUrl.jsx",[],"/Users/leeraulin/Projects/snapnurse/my-booker/src/CopyButton.jsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":69,"column":7,"nodeType":"80","messageId":"81","endLine":69,"endColumn":16},{"ruleId":"78","severity":1,"message":"82","line":72,"column":7,"nodeType":"80","messageId":"81","endLine":72,"endColumn":15},{"ruleId":"78","severity":1,"message":"83","line":2,"column":26,"nodeType":"80","messageId":"81","endLine":2,"endColumn":32},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'confirmed' is assigned a value but never used.","Identifier","unusedVar","'approved' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]